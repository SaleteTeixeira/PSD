%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(messages).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("messages.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type 'Reply'() :: #'Reply'{}.

-type 'LoginRequest'() :: #'LoginRequest'{}.

-type 'Request'() :: #'Request'{}.

-type 'LogoutRequest'() :: #'LogoutRequest'{}.

-type 'AuctionBid'() :: #'AuctionBid'{}.

-type 'FixedSubscription'() :: #'FixedSubscription'{}.

-type 'Auction'() :: #'Auction'{}.

-type 'FixedLoan'() :: #'FixedLoan'{}.

-type 'AuctionEntry'() :: #'AuctionEntry'{}.

-type 'AuctionList'() :: #'AuctionList'{}.

-type 'FixedEntry'() :: #'FixedEntry'{}.

-type 'FixedList'() :: #'FixedList'{}.

-type 'CompanyList'() :: #'CompanyList'{}.

-type 'CompanyInfoRequest'() :: #'CompanyInfoRequest'{}.

-type 'CompanyInfoReply'() :: #'CompanyInfoReply'{}.

-export_type(['Reply'/0, 'LoginRequest'/0, 'Request'/0, 'LogoutRequest'/0, 'AuctionBid'/0, 'FixedSubscription'/0, 'Auction'/0, 'FixedLoan'/0, 'AuctionEntry'/0, 'AuctionList'/0, 'FixedEntry'/0, 'FixedList'/0, 'CompanyList'/0, 'CompanyInfoRequest'/0, 'CompanyInfoReply'/0]).

-spec encode_msg(#'Reply'{} | #'LoginRequest'{} | #'Request'{} | #'LogoutRequest'{} | #'AuctionBid'{} | #'FixedSubscription'{} | #'Auction'{} | #'FixedLoan'{} | #'AuctionEntry'{} | #'AuctionList'{} | #'FixedEntry'{} | #'FixedList'{} | #'CompanyList'{} | #'CompanyInfoRequest'{} | #'CompanyInfoReply'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'Reply'{} | #'LoginRequest'{} | #'Request'{} | #'LogoutRequest'{} | #'AuctionBid'{} | #'FixedSubscription'{} | #'Auction'{} | #'FixedLoan'{} | #'AuctionEntry'{} | #'AuctionList'{} | #'FixedEntry'{} | #'FixedList'{} | #'CompanyList'{} | #'CompanyInfoRequest'{} | #'CompanyInfoReply'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'Reply'{} | #'LoginRequest'{} | #'Request'{} | #'LogoutRequest'{} | #'AuctionBid'{} | #'FixedSubscription'{} | #'Auction'{} | #'FixedLoan'{} | #'AuctionEntry'{} | #'AuctionList'{} | #'FixedEntry'{} | #'FixedList'{} | #'CompanyList'{} | #'CompanyInfoRequest'{} | #'CompanyInfoReply'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Reply' ->
	  encode_msg_Reply(id(Msg, TrUserData), TrUserData);
      'LoginRequest' ->
	  encode_msg_LoginRequest(id(Msg, TrUserData),
				  TrUserData);
      'Request' ->
	  encode_msg_Request(id(Msg, TrUserData), TrUserData);
      'LogoutRequest' ->
	  encode_msg_LogoutRequest(id(Msg, TrUserData),
				   TrUserData);
      'AuctionBid' ->
	  encode_msg_AuctionBid(id(Msg, TrUserData), TrUserData);
      'FixedSubscription' ->
	  encode_msg_FixedSubscription(id(Msg, TrUserData),
				       TrUserData);
      'Auction' ->
	  encode_msg_Auction(id(Msg, TrUserData), TrUserData);
      'FixedLoan' ->
	  encode_msg_FixedLoan(id(Msg, TrUserData), TrUserData);
      'AuctionEntry' ->
	  encode_msg_AuctionEntry(id(Msg, TrUserData),
				  TrUserData);
      'AuctionList' ->
	  encode_msg_AuctionList(id(Msg, TrUserData), TrUserData);
      'FixedEntry' ->
	  encode_msg_FixedEntry(id(Msg, TrUserData), TrUserData);
      'FixedList' ->
	  encode_msg_FixedList(id(Msg, TrUserData), TrUserData);
      'CompanyList' ->
	  encode_msg_CompanyList(id(Msg, TrUserData), TrUserData);
      'CompanyInfoRequest' ->
	  encode_msg_CompanyInfoRequest(id(Msg, TrUserData),
					TrUserData);
      'CompanyInfoReply' ->
	  encode_msg_CompanyInfoReply(id(Msg, TrUserData),
				      TrUserData)
    end.


encode_msg_Reply(Msg, TrUserData) ->
    encode_msg_Reply(Msg, <<>>, TrUserData).


encode_msg_Reply(#'Reply'{result = F1, message = F2},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= false -> Bin;
		     true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_LoginRequest(Msg, TrUserData) ->
    encode_msg_LoginRequest(Msg, <<>>, TrUserData).


encode_msg_LoginRequest(#'LoginRequest'{username = F1,
					password = F2, role = F3},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     case is_empty_string(TrF3) of
	       true -> B2;
	       false ->
		   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	     end
	   end
    end.

encode_msg_Request(Msg, TrUserData) ->
    encode_msg_Request(Msg, <<>>, TrUserData).


encode_msg_Request(#'Request'{type = F1}, Bin,
		   TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_LogoutRequest(Msg, TrUserData) ->
    encode_msg_LogoutRequest(Msg, <<>>, TrUserData).


encode_msg_LogoutRequest(#'LogoutRequest'{type = F1,
					  username = F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_AuctionBid(Msg, TrUserData) ->
    encode_msg_AuctionBid(Msg, <<>>, TrUserData).


encode_msg_AuctionBid(#'AuctionBid'{type = F1,
				    username = F2, company = F3, amount = F4,
				    interest = F5},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0.0 -> B4;
		true ->
		    e_type_double(TrF5, <<B4/binary, 41>>, TrUserData)
	     end
	   end
    end.

encode_msg_FixedSubscription(Msg, TrUserData) ->
    encode_msg_FixedSubscription(Msg, <<>>, TrUserData).


encode_msg_FixedSubscription(#'FixedSubscription'{type =
						      F1,
						  username = F2, company = F3,
						  amount = F4},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  case is_empty_string(TrF3) of
		    true -> B2;
		    false ->
			e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_Auction(Msg, TrUserData) ->
    encode_msg_Auction(Msg, <<>>, TrUserData).


encode_msg_Auction(#'Auction'{type = F1, company = F2,
			      amount = F3, interest = F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
	     end
	   end
    end.

encode_msg_FixedLoan(Msg, TrUserData) ->
    encode_msg_FixedLoan(Msg, <<>>, TrUserData).


encode_msg_FixedLoan(#'FixedLoan'{type = F1,
				  username = F2, amount = F3, interest = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
	     end
	   end
    end.

encode_msg_AuctionEntry(Msg, TrUserData) ->
    encode_msg_AuctionEntry(Msg, <<>>, TrUserData).


encode_msg_AuctionEntry(#'AuctionEntry'{type = F1,
					company = F2, amount = F3,
					interest = F4},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
	     end
	   end
    end.

encode_msg_AuctionList(Msg, TrUserData) ->
    encode_msg_AuctionList(Msg, <<>>, TrUserData).


encode_msg_AuctionList(#'AuctionList'{type = F1,
				      entry = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_AuctionList_entry(TrF2, B1, TrUserData)
      end
    end.

encode_msg_FixedEntry(Msg, TrUserData) ->
    encode_msg_FixedEntry(Msg, <<>>, TrUserData).


encode_msg_FixedEntry(#'FixedEntry'{type = F1,
				    company = F2, amount = F3, interest = F4},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0.0 -> B3;
		true ->
		    e_type_double(TrF4, <<B3/binary, 33>>, TrUserData)
	     end
	   end
    end.

encode_msg_FixedList(Msg, TrUserData) ->
    encode_msg_FixedList(Msg, <<>>, TrUserData).


encode_msg_FixedList(#'FixedList'{type = F1,
				  entry = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_FixedList_entry(TrF2, B1, TrUserData)
      end
    end.

encode_msg_CompanyList(Msg, TrUserData) ->
    encode_msg_CompanyList(Msg, <<>>, TrUserData).


encode_msg_CompanyList(#'CompanyList'{type = F1,
				      names = F2},
		       Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true -> e_field_CompanyList_names(TrF2, B1, TrUserData)
      end
    end.

encode_msg_CompanyInfoRequest(Msg, TrUserData) ->
    encode_msg_CompanyInfoRequest(Msg, <<>>, TrUserData).


encode_msg_CompanyInfoRequest(#'CompanyInfoRequest'{type
							= F1,
						    company = F2},
			      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_CompanyInfoReply(Msg, TrUserData) ->
    encode_msg_CompanyInfoReply(Msg, <<>>, TrUserData).


encode_msg_CompanyInfoReply(#'CompanyInfoReply'{type =
						    F1,
						company = F2, entryA = F3,
						entryF = F4},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case is_empty_string(TrF2) of
		    true -> B1;
		    false ->
			e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_CompanyInfoReply_entryA(TrF3, B2, TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_CompanyInfoReply_entryF(TrF4, B3, TrUserData)
      end
    end.

e_mfield_AuctionList_entry(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AuctionEntry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_AuctionList_entry([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_AuctionList_entry(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_AuctionList_entry(Rest, Bin3, TrUserData);
e_field_AuctionList_entry([], Bin, _TrUserData) -> Bin.

e_mfield_FixedList_entry(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_FixedEntry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_FixedList_entry([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_FixedList_entry(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_FixedList_entry(Rest, Bin3, TrUserData);
e_field_FixedList_entry([], Bin, _TrUserData) -> Bin.

e_field_CompanyList_names([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_CompanyList_names(Rest, Bin3, TrUserData);
e_field_CompanyList_names([], Bin, _TrUserData) -> Bin.

e_mfield_CompanyInfoReply_entryA(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_AuctionEntry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CompanyInfoReply_entryA([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_CompanyInfoReply_entryA(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_CompanyInfoReply_entryA(Rest, Bin3, TrUserData);
e_field_CompanyInfoReply_entryA([], Bin, _TrUserData) ->
    Bin.

e_mfield_CompanyInfoReply_entryF(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_FixedEntry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_CompanyInfoReply_entryF([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_mfield_CompanyInfoReply_entryF(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_CompanyInfoReply_entryF(Rest, Bin3, TrUserData);
e_field_CompanyInfoReply_entryF([], Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Reply', Bin, TrUserData) ->
    id(decode_msg_Reply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LoginRequest', Bin, TrUserData) ->
    id(decode_msg_LoginRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Request', Bin, TrUserData) ->
    id(decode_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('LogoutRequest', Bin, TrUserData) ->
    id(decode_msg_LogoutRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuctionBid', Bin, TrUserData) ->
    id(decode_msg_AuctionBid(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FixedSubscription', Bin,
		  TrUserData) ->
    id(decode_msg_FixedSubscription(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Auction', Bin, TrUserData) ->
    id(decode_msg_Auction(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FixedLoan', Bin, TrUserData) ->
    id(decode_msg_FixedLoan(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AuctionEntry', Bin, TrUserData) ->
    id(decode_msg_AuctionEntry(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuctionList', Bin, TrUserData) ->
    id(decode_msg_AuctionList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FixedEntry', Bin, TrUserData) ->
    id(decode_msg_FixedEntry(Bin, TrUserData), TrUserData);
decode_msg_2_doit('FixedList', Bin, TrUserData) ->
    id(decode_msg_FixedList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CompanyList', Bin, TrUserData) ->
    id(decode_msg_CompanyList(Bin, TrUserData), TrUserData);
decode_msg_2_doit('CompanyInfoRequest', Bin,
		  TrUserData) ->
    id(decode_msg_CompanyInfoRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('CompanyInfoReply', Bin,
		  TrUserData) ->
    id(decode_msg_CompanyInfoReply(Bin, TrUserData),
       TrUserData).



decode_msg_Reply(Bin, TrUserData) ->
    dfp_read_field_def_Reply(Bin, 0, 0,
			     id(false, TrUserData), id([], TrUserData),
			     TrUserData).

dfp_read_field_def_Reply(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Reply_result(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_Reply(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_Reply_message(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_Reply(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Reply'{result = F@_1, message = F@_2};
dfp_read_field_def_Reply(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_Reply(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_Reply(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Reply(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_Reply(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_Reply_result(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_Reply_message(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Reply(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_Reply(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_Reply(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_Reply(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_Reply(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_Reply(<<>>, 0, 0, F@_1, F@_2, _) ->
    #'Reply'{result = F@_1, message = F@_2}.

d_field_Reply_result(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Reply_result(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_Reply_result(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_Reply(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_Reply_message(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_Reply_message(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_Reply_message(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Reply(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_Reply(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_Reply(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_Reply(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_Reply(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_Reply(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_Reply(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Reply(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_Reply(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Reply(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_Reply(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_Reply(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_Reply(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_LoginRequest(Bin, TrUserData) ->
    dfp_read_field_def_LoginRequest(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    id([], TrUserData), TrUserData).

dfp_read_field_def_LoginRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_username(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_password(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_LoginRequest_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #'LoginRequest'{username = F@_1, password = F@_2,
		    role = F@_3};
dfp_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_LoginRequest(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_LoginRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LoginRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_LoginRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LoginRequest_username(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_LoginRequest_password(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      26 ->
	  d_field_LoginRequest_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_LoginRequest(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_LoginRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_LoginRequest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_LoginRequest(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #'LoginRequest'{username = F@_1, password = F@_2,
		    role = F@_3}.

d_field_LoginRequest_username(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_username(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LoginRequest_username(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_LoginRequest_password(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_password(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_LoginRequest_password(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_LoginRequest_role(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_LoginRequest_role(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_LoginRequest_role(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LoginRequest(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_LoginRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_LoginRequest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_LoginRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_LoginRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_LoginRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_LoginRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LoginRequest(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_LoginRequest(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LoginRequest(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_LoginRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_LoginRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_LoginRequest(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

decode_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id([], TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_type(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    #'Request'{type = F@_1};
dfp_read_field_def_Request(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_type(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    #'Request'{type = F@_1}.

d_field_Request_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 TrUserData);
d_field_Request_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0, NewFValue,
			       TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_LogoutRequest(Bin, TrUserData) ->
    dfp_read_field_def_LogoutRequest(Bin, 0, 0,
				     id([], TrUserData), id([], TrUserData),
				     TrUserData).

dfp_read_field_def_LogoutRequest(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LogoutRequest_type(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_LogoutRequest(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_LogoutRequest_username(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_LogoutRequest(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'LogoutRequest'{type = F@_1, username = F@_2};
dfp_read_field_def_LogoutRequest(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_LogoutRequest(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_LogoutRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_LogoutRequest(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_LogoutRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_LogoutRequest_type(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_LogoutRequest_username(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_LogoutRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_LogoutRequest(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_LogoutRequest(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_LogoutRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_LogoutRequest(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_LogoutRequest(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #'LogoutRequest'{type = F@_1, username = F@_2}.

d_field_LogoutRequest_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LogoutRequest_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_LogoutRequest_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LogoutRequest(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_LogoutRequest_username(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_LogoutRequest_username(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_LogoutRequest_username(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_LogoutRequest(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_LogoutRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_LogoutRequest(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_LogoutRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LogoutRequest(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_LogoutRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_LogoutRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_LogoutRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_LogoutRequest(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_LogoutRequest(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_LogoutRequest(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_LogoutRequest(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LogoutRequest(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_LogoutRequest(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_LogoutRequest(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_AuctionBid(Bin, TrUserData) ->
    dfp_read_field_def_AuctionBid(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id([], TrUserData), id(0, TrUserData),
				  id(0.0, TrUserData), TrUserData).

dfp_read_field_def_AuctionBid(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_AuctionBid_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_AuctionBid(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_AuctionBid_username(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AuctionBid(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_AuctionBid_company(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AuctionBid(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_AuctionBid_amount(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AuctionBid(<<41, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_AuctionBid_interest(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AuctionBid(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #'AuctionBid'{type = F@_1, username = F@_2,
		  company = F@_3, amount = F@_4, interest = F@_5};
dfp_read_field_def_AuctionBid(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_AuctionBid(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_AuctionBid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuctionBid(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_AuctionBid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuctionBid_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      18 ->
	  d_field_AuctionBid_username(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      26 ->
	  d_field_AuctionBid_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      32 ->
	  d_field_AuctionBid_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      41 ->
	  d_field_AuctionBid_interest(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuctionBid(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_AuctionBid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_AuctionBid(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_AuctionBid(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_AuctionBid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_AuctionBid(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #'AuctionBid'{type = F@_1, username = F@_2,
		  company = F@_3, amount = F@_4, interest = F@_5}.

d_field_AuctionBid_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_AuctionBid_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_AuctionBid_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionBid(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_AuctionBid_username(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_AuctionBid_username(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_AuctionBid_username(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionBid(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_AuctionBid_company(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_AuctionBid_company(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_AuctionBid_company(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionBid(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_AuctionBid_amount(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_AuctionBid_amount(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_AuctionBid_amount(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_AuctionBid(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_AuctionBid_interest(<<0:48, 240, 127,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, id(infinity, TrUserData),
				  TrUserData);
d_field_AuctionBid_interest(<<0:48, 240, 255,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, id('-infinity', TrUserData),
				  TrUserData);
d_field_AuctionBid_interest(<<_:48, 15:4, _:4, _:1,
			      127:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, id(nan, TrUserData), TrUserData);
d_field_AuctionBid_interest(<<Value:64/little-float,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, id(Value, TrUserData),
				  TrUserData).

skip_varint_AuctionBid(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_AuctionBid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_AuctionBid(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_AuctionBid(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_AuctionBid(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_AuctionBid(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuctionBid(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_AuctionBid(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuctionBid(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_AuctionBid(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_AuctionBid(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AuctionBid(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_FixedSubscription(Bin, TrUserData) ->
    dfp_read_field_def_FixedSubscription(Bin, 0, 0,
					 id([], TrUserData), id([], TrUserData),
					 id([], TrUserData), id(0, TrUserData),
					 TrUserData).

dfp_read_field_def_FixedSubscription(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_FixedSubscription_type(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedSubscription(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_FixedSubscription_username(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedSubscription(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_FixedSubscription_company(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedSubscription(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_FixedSubscription_amount(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedSubscription(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #'FixedSubscription'{type = F@_1, username = F@_2,
			 company = F@_3, amount = F@_4};
dfp_read_field_def_FixedSubscription(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_FixedSubscription(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_FixedSubscription(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FixedSubscription(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
dg_read_field_def_FixedSubscription(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FixedSubscription_type(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
      18 ->
	  d_field_FixedSubscription_username(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      26 ->
	  d_field_FixedSubscription_company(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_FixedSubscription_amount(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FixedSubscription(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_FixedSubscription(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    2 ->
		skip_length_delimited_FixedSubscription(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    3 ->
		skip_group_FixedSubscription(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_FixedSubscription(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData)
	  end
    end;
dg_read_field_def_FixedSubscription(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #'FixedSubscription'{type = F@_1, username = F@_2,
			 company = F@_3, amount = F@_4}.

d_field_FixedSubscription_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedSubscription_type(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
d_field_FixedSubscription_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedSubscription(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4,
					 TrUserData).

d_field_FixedSubscription_username(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedSubscription_username(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_FixedSubscription_username(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedSubscription(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, TrUserData).

d_field_FixedSubscription_company(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedSubscription_company(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_FixedSubscription_company(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedSubscription(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, TrUserData).

d_field_FixedSubscription_amount(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedSubscription_amount(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_FixedSubscription_amount(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_FixedSubscription(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, TrUserData).

skip_varint_FixedSubscription(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_FixedSubscription(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
skip_varint_FixedSubscription(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedSubscription(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_FixedSubscription(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_FixedSubscription(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
skip_length_delimited_FixedSubscription(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FixedSubscription(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_group_FixedSubscription(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FixedSubscription(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_32_FixedSubscription(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedSubscription(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_64_FixedSubscription(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedSubscription(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

decode_msg_Auction(Bin, TrUserData) ->
    dfp_read_field_def_Auction(Bin, 0, 0,
			       id([], TrUserData), id([], TrUserData),
			       id(0, TrUserData), id(0.0, TrUserData),
			       TrUserData).

dfp_read_field_def_Auction(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Auction_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_Auction(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Auction_company(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_Auction(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Auction_amount(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_Auction(<<33, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_Auction_interest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_Auction(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #'Auction'{type = F@_1, company = F@_2, amount = F@_3,
	       interest = F@_4};
dfp_read_field_def_Auction(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_Auction(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_Auction(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Auction(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_Auction(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Auction_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      18 ->
	  d_field_Auction_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_Auction_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      33 ->
	  d_field_Auction_interest(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_Auction(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_Auction(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_Auction(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_Auction(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_Auction(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_Auction(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #'Auction'{type = F@_1, company = F@_2, amount = F@_3,
	       interest = F@_4}.

d_field_Auction_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Auction_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_Auction_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Auction(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_Auction_company(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Auction_company(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_Auction_company(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Auction(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, TrUserData).

d_field_Auction_amount(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_Auction_amount(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_Auction_amount(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_Auction(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, TrUserData).

d_field_Auction_interest(<<0:48, 240, 127,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, id(infinity, TrUserData), TrUserData);
d_field_Auction_interest(<<0:48, 240, 255,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, id('-infinity', TrUserData), TrUserData);
d_field_Auction_interest(<<_:48, 15:4, _:4, _:1, 127:7,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, id(nan, TrUserData), TrUserData);
d_field_Auction_interest(<<Value:64/little-float,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, id(Value, TrUserData), TrUserData).

skip_varint_Auction(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_Auction(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_Auction(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_Auction(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_Auction(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_Auction(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Auction(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_Auction(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Auction(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_Auction(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_Auction(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_Auction(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

decode_msg_FixedLoan(Bin, TrUserData) ->
    dfp_read_field_def_FixedLoan(Bin, 0, 0,
				 id([], TrUserData), id([], TrUserData),
				 id(0, TrUserData), id(0.0, TrUserData),
				 TrUserData).

dfp_read_field_def_FixedLoan(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedLoan_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_FixedLoan(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedLoan_username(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedLoan(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedLoan_amount(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_FixedLoan(<<33, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedLoan_interest(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedLoan(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'FixedLoan'{type = F@_1, username = F@_2,
		 amount = F@_3, interest = F@_4};
dfp_read_field_def_FixedLoan(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    dg_read_field_def_FixedLoan(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

dg_read_field_def_FixedLoan(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FixedLoan(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_FixedLoan(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FixedLoan_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      18 ->
	  d_field_FixedLoan_username(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      24 ->
	  d_field_FixedLoan_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      33 ->
	  d_field_FixedLoan_interest(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FixedLoan(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    1 ->
		skip_64_FixedLoan(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
	    2 ->
		skip_length_delimited_FixedLoan(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_FixedLoan(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_FixedLoan(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData)
	  end
    end;
dg_read_field_def_FixedLoan(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #'FixedLoan'{type = F@_1, username = F@_2,
		 amount = F@_3, interest = F@_4}.

d_field_FixedLoan_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedLoan_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_FixedLoan_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedLoan(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, TrUserData).

d_field_FixedLoan_username(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedLoan_username(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FixedLoan_username(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedLoan(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, TrUserData).

d_field_FixedLoan_amount(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedLoan_amount(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FixedLoan_amount(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_FixedLoan(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, TrUserData).

d_field_FixedLoan_interest(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, id(infinity, TrUserData), TrUserData);
d_field_FixedLoan_interest(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, id('-infinity', TrUserData), TrUserData);
d_field_FixedLoan_interest(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, id(nan, TrUserData), TrUserData);
d_field_FixedLoan_interest(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, id(Value, TrUserData), TrUserData).

skip_varint_FixedLoan(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_FixedLoan(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
skip_varint_FixedLoan(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_length_delimited_FixedLoan(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_FixedLoan(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
skip_length_delimited_FixedLoan(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FixedLoan(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_group_FixedLoan(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FixedLoan(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_32_FixedLoan(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_64_FixedLoan(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedLoan(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

decode_msg_AuctionEntry(Bin, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Bin, 0, 0,
				    id([], TrUserData), id([], TrUserData),
				    id(0, TrUserData), id(0.0, TrUserData),
				    TrUserData).

dfp_read_field_def_AuctionEntry(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_AuctionEntry_type(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_AuctionEntry(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_AuctionEntry_company(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_AuctionEntry(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_AuctionEntry_amount(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_AuctionEntry(<<33, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_AuctionEntry_interest(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_AuctionEntry(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    #'AuctionEntry'{type = F@_1, company = F@_2,
		    amount = F@_3, interest = F@_4};
dfp_read_field_def_AuctionEntry(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_AuctionEntry(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_AuctionEntry(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuctionEntry(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
dg_read_field_def_AuctionEntry(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuctionEntry_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      18 ->
	  d_field_AuctionEntry_company(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      24 ->
	  d_field_AuctionEntry_amount(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      33 ->
	  d_field_AuctionEntry_interest(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuctionEntry(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    1 ->
		skip_64_AuctionEntry(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    2 ->
		skip_length_delimited_AuctionEntry(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    3 ->
		skip_group_AuctionEntry(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_AuctionEntry(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData)
	  end
    end;
dg_read_field_def_AuctionEntry(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, _) ->
    #'AuctionEntry'{type = F@_1, company = F@_2,
		    amount = F@_3, interest = F@_4}.

d_field_AuctionEntry_type(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_AuctionEntry_type(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AuctionEntry_type(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionEntry(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, F@_4, TrUserData).

d_field_AuctionEntry_company(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_AuctionEntry_company(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AuctionEntry_company(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionEntry(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, TrUserData).

d_field_AuctionEntry_amount(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_AuctionEntry_amount(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_AuctionEntry_amount(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_AuctionEntry(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, TrUserData).

d_field_AuctionEntry_interest(<<0:48, 240, 127,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, id(infinity, TrUserData),
				    TrUserData);
d_field_AuctionEntry_interest(<<0:48, 240, 255,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, id('-infinity', TrUserData),
				    TrUserData);
d_field_AuctionEntry_interest(<<_:48, 15:4, _:4, _:1,
				127:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, id(nan, TrUserData),
				    TrUserData);
d_field_AuctionEntry_interest(<<Value:64/little-float,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, id(Value, TrUserData),
				    TrUserData).

skip_varint_AuctionEntry(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_AuctionEntry(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
skip_varint_AuctionEntry(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_AuctionEntry(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuctionEntry(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
skip_length_delimited_AuctionEntry(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuctionEntry(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData).

skip_group_AuctionEntry(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuctionEntry(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, TrUserData).

skip_32_AuctionEntry(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

skip_64_AuctionEntry(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_AuctionEntry(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

decode_msg_AuctionList(Bin, TrUserData) ->
    dfp_read_field_def_AuctionList(Bin, 0, 0,
				   id([], TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_AuctionList(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuctionList_type(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_AuctionList(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_AuctionList_entry(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_AuctionList(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    #'AuctionList'{type = F@_1,
		   entry = lists_reverse(R1, TrUserData)};
dfp_read_field_def_AuctionList(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_AuctionList(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_AuctionList(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuctionList(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AuctionList(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AuctionList_type(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_AuctionList_entry(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuctionList(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_AuctionList(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_AuctionList(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_AuctionList(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_AuctionList(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AuctionList(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    #'AuctionList'{type = F@_1,
		   entry = lists_reverse(R1, TrUserData)}.

d_field_AuctionList_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuctionList_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_AuctionList_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionList(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_AuctionList_entry(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AuctionList_entry(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_AuctionList_entry(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AuctionEntry(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuctionList(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_AuctionList(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AuctionList(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_AuctionList(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AuctionList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_AuctionList(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuctionList(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AuctionList(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuctionList(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_AuctionList(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuctionList(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_AuctionList(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_AuctionList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_AuctionList(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_AuctionList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_FixedEntry(Bin, TrUserData) ->
    dfp_read_field_def_FixedEntry(Bin, 0, 0,
				  id([], TrUserData), id([], TrUserData),
				  id(0, TrUserData), id(0.0, TrUserData),
				  TrUserData).

dfp_read_field_def_FixedEntry(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedEntry_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_FixedEntry(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedEntry_company(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedEntry(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedEntry_amount(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedEntry(<<33, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_FixedEntry_interest(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_FixedEntry(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, _) ->
    #'FixedEntry'{type = F@_1, company = F@_2,
		  amount = F@_3, interest = F@_4};
dfp_read_field_def_FixedEntry(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    dg_read_field_def_FixedEntry(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

dg_read_field_def_FixedEntry(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FixedEntry(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_FixedEntry(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FixedEntry_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      18 ->
	  d_field_FixedEntry_company(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      24 ->
	  d_field_FixedEntry_amount(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      33 ->
	  d_field_FixedEntry_interest(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FixedEntry(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, TrUserData);
	    1 ->
		skip_64_FixedEntry(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    2 ->
		skip_length_delimited_FixedEntry(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_FixedEntry(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_FixedEntry(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData)
	  end
    end;
dg_read_field_def_FixedEntry(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #'FixedEntry'{type = F@_1, company = F@_2,
		  amount = F@_3, interest = F@_4}.

d_field_FixedEntry_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedEntry_type(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FixedEntry_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedEntry(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, TrUserData).

d_field_FixedEntry_company(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedEntry_company(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FixedEntry_company(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedEntry(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, TrUserData).

d_field_FixedEntry_amount(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_FixedEntry_amount(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_FixedEntry_amount(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_FixedEntry(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, TrUserData).

d_field_FixedEntry_interest(<<0:48, 240, 127,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(infinity, TrUserData), TrUserData);
d_field_FixedEntry_interest(<<0:48, 240, 255,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id('-infinity', TrUserData),
				  TrUserData);
d_field_FixedEntry_interest(<<_:48, 15:4, _:4, _:1,
			      127:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(nan, TrUserData), TrUserData);
d_field_FixedEntry_interest(<<Value:64/little-float,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, _, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, id(Value, TrUserData), TrUserData).

skip_varint_FixedEntry(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_FixedEntry(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
skip_varint_FixedEntry(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_length_delimited_FixedEntry(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_FixedEntry(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
skip_length_delimited_FixedEntry(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FixedEntry(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_group_FixedEntry(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FixedEntry(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_32_FixedEntry(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

skip_64_FixedEntry(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_FixedEntry(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData).

decode_msg_FixedList(Bin, TrUserData) ->
    dfp_read_field_def_FixedList(Bin, 0, 0,
				 id([], TrUserData), id([], TrUserData),
				 TrUserData).

dfp_read_field_def_FixedList(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_FixedList_type(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_FixedList(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_FixedList_entry(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_FixedList(<<>>, 0, 0, F@_1, R1,
			     TrUserData) ->
    #'FixedList'{type = F@_1,
		 entry = lists_reverse(R1, TrUserData)};
dfp_read_field_def_FixedList(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_FixedList(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_FixedList(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_FixedList(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_FixedList(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_FixedList_type(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_FixedList_entry(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_FixedList(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_FixedList(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_FixedList(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_FixedList(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_FixedList(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_FixedList(<<>>, 0, 0, F@_1, R1,
			    TrUserData) ->
    #'FixedList'{type = F@_1,
		 entry = lists_reverse(R1, TrUserData)}.

d_field_FixedList_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_FixedList_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_FixedList_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedList(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_FixedList_entry(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_FixedList_entry(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_FixedList_entry(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_FixedEntry(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_FixedList(RestF, 0, 0, F@_1,
				 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_FixedList(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_FixedList(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_FixedList(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_FixedList(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_FixedList(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_FixedList(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_FixedList(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_FixedList(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_FixedList(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_FixedList(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_FixedList(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_FixedList(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_FixedList(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_FixedList(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_CompanyList(Bin, TrUserData) ->
    dfp_read_field_def_CompanyList(Bin, 0, 0,
				   id([], TrUserData), id([], TrUserData),
				   TrUserData).

dfp_read_field_def_CompanyList(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompanyList_type(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_CompanyList(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompanyList_names(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_CompanyList(<<>>, 0, 0, F@_1, R1,
			       TrUserData) ->
    #'CompanyList'{type = F@_1,
		   names = lists_reverse(R1, TrUserData)};
dfp_read_field_def_CompanyList(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_CompanyList(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_CompanyList(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CompanyList(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_CompanyList(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CompanyList_type(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_CompanyList_names(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CompanyList(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_CompanyList(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_CompanyList(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_CompanyList(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_CompanyList(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_CompanyList(<<>>, 0, 0, F@_1, R1,
			      TrUserData) ->
    #'CompanyList'{type = F@_1,
		   names = lists_reverse(R1, TrUserData)}.

d_field_CompanyList_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompanyList_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_CompanyList_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyList(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_CompanyList_names(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompanyList_names(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_CompanyList_names(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyList(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_CompanyList(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_CompanyList(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_CompanyList(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompanyList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_CompanyList(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CompanyList(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_CompanyList(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CompanyList(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_CompanyList(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CompanyList(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_CompanyList(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_CompanyList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_CompanyList(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_CompanyList(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_CompanyInfoRequest(Bin, TrUserData) ->
    dfp_read_field_def_CompanyInfoRequest(Bin, 0, 0,
					  id([], TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_CompanyInfoRequest(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompanyInfoRequest_type(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_CompanyInfoRequest(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_CompanyInfoRequest_company(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_CompanyInfoRequest(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #'CompanyInfoRequest'{type = F@_1, company = F@_2};
dfp_read_field_def_CompanyInfoRequest(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_CompanyInfoRequest(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_CompanyInfoRequest(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CompanyInfoRequest(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_CompanyInfoRequest(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CompanyInfoRequest_type(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_CompanyInfoRequest_company(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CompanyInfoRequest(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_CompanyInfoRequest(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_CompanyInfoRequest(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_CompanyInfoRequest(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_CompanyInfoRequest(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_CompanyInfoRequest(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #'CompanyInfoRequest'{type = F@_1, company = F@_2}.

d_field_CompanyInfoRequest_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoRequest_type(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_CompanyInfoRequest_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoRequest(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_CompanyInfoRequest_company(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoRequest_company(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_CompanyInfoRequest_company(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoRequest(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_CompanyInfoRequest(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_CompanyInfoRequest(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_CompanyInfoRequest(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompanyInfoRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_CompanyInfoRequest(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_CompanyInfoRequest(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_CompanyInfoRequest(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CompanyInfoRequest(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_CompanyInfoRequest(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CompanyInfoRequest(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_CompanyInfoRequest(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompanyInfoRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_CompanyInfoRequest(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_CompanyInfoRequest(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_CompanyInfoReply(Bin, TrUserData) ->
    dfp_read_field_def_CompanyInfoReply(Bin, 0, 0,
					id([], TrUserData), id([], TrUserData),
					id([], TrUserData), id([], TrUserData),
					TrUserData).

dfp_read_field_def_CompanyInfoReply(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_CompanyInfoReply_type(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_CompanyInfoReply(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_CompanyInfoReply_company(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CompanyInfoReply(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_CompanyInfoReply_entryA(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CompanyInfoReply(<<34, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_CompanyInfoReply_entryF(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_CompanyInfoReply(<<>>, 0, 0, F@_1,
				    F@_2, R1, R2, TrUserData) ->
    #'CompanyInfoReply'{type = F@_1, company = F@_2,
			entryA = lists_reverse(R1, TrUserData),
			entryF = lists_reverse(R2, TrUserData)};
dfp_read_field_def_CompanyInfoReply(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_CompanyInfoReply(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_CompanyInfoReply(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_CompanyInfoReply(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
dg_read_field_def_CompanyInfoReply(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_CompanyInfoReply_type(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      18 ->
	  d_field_CompanyInfoReply_company(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      26 ->
	  d_field_CompanyInfoReply_entryA(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      34 ->
	  d_field_CompanyInfoReply_entryF(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_CompanyInfoReply(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_CompanyInfoReply(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    2 ->
		skip_length_delimited_CompanyInfoReply(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    3 ->
		skip_group_CompanyInfoReply(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_CompanyInfoReply(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData)
	  end
    end;
dg_read_field_def_CompanyInfoReply(<<>>, 0, 0, F@_1,
				   F@_2, R1, R2, TrUserData) ->
    #'CompanyInfoReply'{type = F@_1, company = F@_2,
			entryA = lists_reverse(R1, TrUserData),
			entryF = lists_reverse(R2, TrUserData)}.

d_field_CompanyInfoReply_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoReply_type(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_CompanyInfoReply_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoReply(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4,
					TrUserData).

d_field_CompanyInfoReply_company(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoReply_company(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_CompanyInfoReply_company(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoReply(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, TrUserData).

d_field_CompanyInfoReply_entryA(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoReply_entryA(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_CompanyInfoReply_entryA(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AuctionEntry(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoReply(RestF, 0, 0, F@_1,
					F@_2, cons(NewFValue, Prev, TrUserData),
					F@_4, TrUserData).

d_field_CompanyInfoReply_entryF(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_CompanyInfoReply_entryF(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_CompanyInfoReply_entryF(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_FixedEntry(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_CompanyInfoReply(RestF, 0, 0, F@_1,
					F@_2, F@_3,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_CompanyInfoReply(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_CompanyInfoReply(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
skip_varint_CompanyInfoReply(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CompanyInfoReply(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_CompanyInfoReply(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_CompanyInfoReply(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
skip_length_delimited_CompanyInfoReply(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_CompanyInfoReply(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_group_CompanyInfoReply(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_CompanyInfoReply(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_32_CompanyInfoReply(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CompanyInfoReply(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_64_CompanyInfoReply(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_CompanyInfoReply(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Reply' -> merge_msg_Reply(Prev, New, TrUserData);
      'LoginRequest' ->
	  merge_msg_LoginRequest(Prev, New, TrUserData);
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'LogoutRequest' ->
	  merge_msg_LogoutRequest(Prev, New, TrUserData);
      'AuctionBid' ->
	  merge_msg_AuctionBid(Prev, New, TrUserData);
      'FixedSubscription' ->
	  merge_msg_FixedSubscription(Prev, New, TrUserData);
      'Auction' -> merge_msg_Auction(Prev, New, TrUserData);
      'FixedLoan' ->
	  merge_msg_FixedLoan(Prev, New, TrUserData);
      'AuctionEntry' ->
	  merge_msg_AuctionEntry(Prev, New, TrUserData);
      'AuctionList' ->
	  merge_msg_AuctionList(Prev, New, TrUserData);
      'FixedEntry' ->
	  merge_msg_FixedEntry(Prev, New, TrUserData);
      'FixedList' ->
	  merge_msg_FixedList(Prev, New, TrUserData);
      'CompanyList' ->
	  merge_msg_CompanyList(Prev, New, TrUserData);
      'CompanyInfoRequest' ->
	  merge_msg_CompanyInfoRequest(Prev, New, TrUserData);
      'CompanyInfoReply' ->
	  merge_msg_CompanyInfoReply(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Reply/3}).
merge_msg_Reply(#'Reply'{result = PFresult,
			 message = PFmessage},
		#'Reply'{result = NFresult, message = NFmessage}, _) ->
    #'Reply'{result =
		 if NFresult =:= undefined -> PFresult;
		    true -> NFresult
		 end,
	     message =
		 if NFmessage =:= undefined -> PFmessage;
		    true -> NFmessage
		 end}.

-compile({nowarn_unused_function,merge_msg_LoginRequest/3}).
merge_msg_LoginRequest(#'LoginRequest'{username =
					   PFusername,
				       password = PFpassword, role = PFrole},
		       #'LoginRequest'{username = NFusername,
				       password = NFpassword, role = NFrole},
		       _) ->
    #'LoginRequest'{username =
			if NFusername =:= undefined -> PFusername;
			   true -> NFusername
			end,
		    password =
			if NFpassword =:= undefined -> PFpassword;
			   true -> NFpassword
			end,
		    role =
			if NFrole =:= undefined -> PFrole;
			   true -> NFrole
			end}.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(#'Request'{type = PFtype},
		  #'Request'{type = NFtype}, _) ->
    #'Request'{type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end}.

-compile({nowarn_unused_function,merge_msg_LogoutRequest/3}).
merge_msg_LogoutRequest(#'LogoutRequest'{type = PFtype,
					 username = PFusername},
			#'LogoutRequest'{type = NFtype, username = NFusername},
			_) ->
    #'LogoutRequest'{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end,
		     username =
			 if NFusername =:= undefined -> PFusername;
			    true -> NFusername
			 end}.

-compile({nowarn_unused_function,merge_msg_AuctionBid/3}).
merge_msg_AuctionBid(#'AuctionBid'{type = PFtype,
				   username = PFusername, company = PFcompany,
				   amount = PFamount, interest = PFinterest},
		     #'AuctionBid'{type = NFtype, username = NFusername,
				   company = NFcompany, amount = NFamount,
				   interest = NFinterest},
		     _) ->
    #'AuctionBid'{type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end,
		  username =
		      if NFusername =:= undefined -> PFusername;
			 true -> NFusername
		      end,
		  company =
		      if NFcompany =:= undefined -> PFcompany;
			 true -> NFcompany
		      end,
		  amount =
		      if NFamount =:= undefined -> PFamount;
			 true -> NFamount
		      end,
		  interest =
		      if NFinterest =:= undefined -> PFinterest;
			 true -> NFinterest
		      end}.

-compile({nowarn_unused_function,merge_msg_FixedSubscription/3}).
merge_msg_FixedSubscription(#'FixedSubscription'{type =
						     PFtype,
						 username = PFusername,
						 company = PFcompany,
						 amount = PFamount},
			    #'FixedSubscription'{type = NFtype,
						 username = NFusername,
						 company = NFcompany,
						 amount = NFamount},
			    _) ->
    #'FixedSubscription'{type =
			     if NFtype =:= undefined -> PFtype;
				true -> NFtype
			     end,
			 username =
			     if NFusername =:= undefined -> PFusername;
				true -> NFusername
			     end,
			 company =
			     if NFcompany =:= undefined -> PFcompany;
				true -> NFcompany
			     end,
			 amount =
			     if NFamount =:= undefined -> PFamount;
				true -> NFamount
			     end}.

-compile({nowarn_unused_function,merge_msg_Auction/3}).
merge_msg_Auction(#'Auction'{type = PFtype,
			     company = PFcompany, amount = PFamount,
			     interest = PFinterest},
		  #'Auction'{type = NFtype, company = NFcompany,
			     amount = NFamount, interest = NFinterest},
		  _) ->
    #'Auction'{type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end,
	       company =
		   if NFcompany =:= undefined -> PFcompany;
		      true -> NFcompany
		   end,
	       amount =
		   if NFamount =:= undefined -> PFamount;
		      true -> NFamount
		   end,
	       interest =
		   if NFinterest =:= undefined -> PFinterest;
		      true -> NFinterest
		   end}.

-compile({nowarn_unused_function,merge_msg_FixedLoan/3}).
merge_msg_FixedLoan(#'FixedLoan'{type = PFtype,
				 username = PFusername, amount = PFamount,
				 interest = PFinterest},
		    #'FixedLoan'{type = NFtype, username = NFusername,
				 amount = NFamount, interest = NFinterest},
		    _) ->
    #'FixedLoan'{type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end,
		 username =
		     if NFusername =:= undefined -> PFusername;
			true -> NFusername
		     end,
		 amount =
		     if NFamount =:= undefined -> PFamount;
			true -> NFamount
		     end,
		 interest =
		     if NFinterest =:= undefined -> PFinterest;
			true -> NFinterest
		     end}.

-compile({nowarn_unused_function,merge_msg_AuctionEntry/3}).
merge_msg_AuctionEntry(#'AuctionEntry'{type = PFtype,
				       company = PFcompany, amount = PFamount,
				       interest = PFinterest},
		       #'AuctionEntry'{type = NFtype, company = NFcompany,
				       amount = NFamount,
				       interest = NFinterest},
		       _) ->
    #'AuctionEntry'{type =
			if NFtype =:= undefined -> PFtype;
			   true -> NFtype
			end,
		    company =
			if NFcompany =:= undefined -> PFcompany;
			   true -> NFcompany
			end,
		    amount =
			if NFamount =:= undefined -> PFamount;
			   true -> NFamount
			end,
		    interest =
			if NFinterest =:= undefined -> PFinterest;
			   true -> NFinterest
			end}.

-compile({nowarn_unused_function,merge_msg_AuctionList/3}).
merge_msg_AuctionList(#'AuctionList'{type = PFtype,
				     entry = PFentry},
		      #'AuctionList'{type = NFtype, entry = NFentry},
		      TrUserData) ->
    #'AuctionList'{type =
		       if NFtype =:= undefined -> PFtype;
			  true -> NFtype
		       end,
		   entry =
		       if PFentry /= undefined, NFentry /= undefined ->
			      'erlang_++'(PFentry, NFentry, TrUserData);
			  PFentry == undefined -> NFentry;
			  NFentry == undefined -> PFentry
		       end}.

-compile({nowarn_unused_function,merge_msg_FixedEntry/3}).
merge_msg_FixedEntry(#'FixedEntry'{type = PFtype,
				   company = PFcompany, amount = PFamount,
				   interest = PFinterest},
		     #'FixedEntry'{type = NFtype, company = NFcompany,
				   amount = NFamount, interest = NFinterest},
		     _) ->
    #'FixedEntry'{type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end,
		  company =
		      if NFcompany =:= undefined -> PFcompany;
			 true -> NFcompany
		      end,
		  amount =
		      if NFamount =:= undefined -> PFamount;
			 true -> NFamount
		      end,
		  interest =
		      if NFinterest =:= undefined -> PFinterest;
			 true -> NFinterest
		      end}.

-compile({nowarn_unused_function,merge_msg_FixedList/3}).
merge_msg_FixedList(#'FixedList'{type = PFtype,
				 entry = PFentry},
		    #'FixedList'{type = NFtype, entry = NFentry},
		    TrUserData) ->
    #'FixedList'{type =
		     if NFtype =:= undefined -> PFtype;
			true -> NFtype
		     end,
		 entry =
		     if PFentry /= undefined, NFentry /= undefined ->
			    'erlang_++'(PFentry, NFentry, TrUserData);
			PFentry == undefined -> NFentry;
			NFentry == undefined -> PFentry
		     end}.

-compile({nowarn_unused_function,merge_msg_CompanyList/3}).
merge_msg_CompanyList(#'CompanyList'{type = PFtype,
				     names = PFnames},
		      #'CompanyList'{type = NFtype, names = NFnames},
		      TrUserData) ->
    #'CompanyList'{type =
		       if NFtype =:= undefined -> PFtype;
			  true -> NFtype
		       end,
		   names =
		       if PFnames /= undefined, NFnames /= undefined ->
			      'erlang_++'(PFnames, NFnames, TrUserData);
			  PFnames == undefined -> NFnames;
			  NFnames == undefined -> PFnames
		       end}.

-compile({nowarn_unused_function,merge_msg_CompanyInfoRequest/3}).
merge_msg_CompanyInfoRequest(#'CompanyInfoRequest'{type
						       = PFtype,
						   company = PFcompany},
			     #'CompanyInfoRequest'{type = NFtype,
						   company = NFcompany},
			     _) ->
    #'CompanyInfoRequest'{type =
			      if NFtype =:= undefined -> PFtype;
				 true -> NFtype
			      end,
			  company =
			      if NFcompany =:= undefined -> PFcompany;
				 true -> NFcompany
			      end}.

-compile({nowarn_unused_function,merge_msg_CompanyInfoReply/3}).
merge_msg_CompanyInfoReply(#'CompanyInfoReply'{type =
						   PFtype,
					       company = PFcompany,
					       entryA = PFentryA,
					       entryF = PFentryF},
			   #'CompanyInfoReply'{type = NFtype,
					       company = NFcompany,
					       entryA = NFentryA,
					       entryF = NFentryF},
			   TrUserData) ->
    #'CompanyInfoReply'{type =
			    if NFtype =:= undefined -> PFtype;
			       true -> NFtype
			    end,
			company =
			    if NFcompany =:= undefined -> PFcompany;
			       true -> NFcompany
			    end,
			entryA =
			    if PFentryA /= undefined, NFentryA /= undefined ->
				   'erlang_++'(PFentryA, NFentryA, TrUserData);
			       PFentryA == undefined -> NFentryA;
			       NFentryA == undefined -> PFentryA
			    end,
			entryF =
			    if PFentryF /= undefined, NFentryF /= undefined ->
				   'erlang_++'(PFentryF, NFentryF, TrUserData);
			       PFentryF == undefined -> NFentryF;
			       NFentryF == undefined -> PFentryF
			    end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'Reply' -> v_msg_Reply(Msg, [MsgName], TrUserData);
      'LoginRequest' ->
	  v_msg_LoginRequest(Msg, [MsgName], TrUserData);
      'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
      'LogoutRequest' ->
	  v_msg_LogoutRequest(Msg, [MsgName], TrUserData);
      'AuctionBid' ->
	  v_msg_AuctionBid(Msg, [MsgName], TrUserData);
      'FixedSubscription' ->
	  v_msg_FixedSubscription(Msg, [MsgName], TrUserData);
      'Auction' -> v_msg_Auction(Msg, [MsgName], TrUserData);
      'FixedLoan' ->
	  v_msg_FixedLoan(Msg, [MsgName], TrUserData);
      'AuctionEntry' ->
	  v_msg_AuctionEntry(Msg, [MsgName], TrUserData);
      'AuctionList' ->
	  v_msg_AuctionList(Msg, [MsgName], TrUserData);
      'FixedEntry' ->
	  v_msg_FixedEntry(Msg, [MsgName], TrUserData);
      'FixedList' ->
	  v_msg_FixedList(Msg, [MsgName], TrUserData);
      'CompanyList' ->
	  v_msg_CompanyList(Msg, [MsgName], TrUserData);
      'CompanyInfoRequest' ->
	  v_msg_CompanyInfoRequest(Msg, [MsgName], TrUserData);
      'CompanyInfoReply' ->
	  v_msg_CompanyInfoReply(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Reply/3}).
-dialyzer({nowarn_function,v_msg_Reply/3}).
v_msg_Reply(#'Reply'{result = F1, message = F2}, Path,
	    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [result | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [message | Path], TrUserData)
    end,
    ok;
v_msg_Reply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Reply'}, X, Path).

-compile({nowarn_unused_function,v_msg_LoginRequest/3}).
-dialyzer({nowarn_function,v_msg_LoginRequest/3}).
v_msg_LoginRequest(#'LoginRequest'{username = F1,
				   password = F2, role = F3},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [username | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [password | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [role | Path], TrUserData)
    end,
    ok;
v_msg_LoginRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LoginRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#'Request'{type = F1}, Path,
	      TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    ok;
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_LogoutRequest/3}).
-dialyzer({nowarn_function,v_msg_LogoutRequest/3}).
v_msg_LogoutRequest(#'LogoutRequest'{type = F1,
				     username = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [username | Path], TrUserData)
    end,
    ok;
v_msg_LogoutRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'LogoutRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuctionBid/3}).
-dialyzer({nowarn_function,v_msg_AuctionBid/3}).
v_msg_AuctionBid(#'AuctionBid'{type = F1, username = F2,
			       company = F3, amount = F4, interest = F5},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [username | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [company | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [amount | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_double(F5, [interest | Path], TrUserData)
    end,
    ok;
v_msg_AuctionBid(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuctionBid'}, X, Path).

-compile({nowarn_unused_function,v_msg_FixedSubscription/3}).
-dialyzer({nowarn_function,v_msg_FixedSubscription/3}).
v_msg_FixedSubscription(#'FixedSubscription'{type = F1,
					     username = F2, company = F3,
					     amount = F4},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [username | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_string(F3, [company | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint32(F4, [amount | Path], TrUserData)
    end,
    ok;
v_msg_FixedSubscription(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FixedSubscription'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Auction/3}).
-dialyzer({nowarn_function,v_msg_Auction/3}).
v_msg_Auction(#'Auction'{type = F1, company = F2,
			 amount = F3, interest = F4},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [company | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [amount | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [interest | Path], TrUserData)
    end,
    ok;
v_msg_Auction(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Auction'}, X, Path).

-compile({nowarn_unused_function,v_msg_FixedLoan/3}).
-dialyzer({nowarn_function,v_msg_FixedLoan/3}).
v_msg_FixedLoan(#'FixedLoan'{type = F1, username = F2,
			     amount = F3, interest = F4},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [username | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [amount | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [interest | Path], TrUserData)
    end,
    ok;
v_msg_FixedLoan(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FixedLoan'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuctionEntry/3}).
-dialyzer({nowarn_function,v_msg_AuctionEntry/3}).
v_msg_AuctionEntry(#'AuctionEntry'{type = F1,
				   company = F2, amount = F3, interest = F4},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [company | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [amount | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [interest | Path], TrUserData)
    end,
    ok;
v_msg_AuctionEntry(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuctionEntry'}, X, Path).

-compile({nowarn_unused_function,v_msg_AuctionList/3}).
-dialyzer({nowarn_function,v_msg_AuctionList/3}).
v_msg_AuctionList(#'AuctionList'{type = F1, entry = F2},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_AuctionEntry(Elem, [entry | Path],
				   TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'AuctionEntry'}},
			 F2, [entry | Path])
    end,
    ok;
v_msg_AuctionList(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuctionList'}, X, Path).

-compile({nowarn_unused_function,v_msg_FixedEntry/3}).
-dialyzer({nowarn_function,v_msg_FixedEntry/3}).
v_msg_FixedEntry(#'FixedEntry'{type = F1, company = F2,
			       amount = F3, interest = F4},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [company | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_uint32(F3, [amount | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_double(F4, [interest | Path], TrUserData)
    end,
    ok;
v_msg_FixedEntry(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FixedEntry'}, X, Path).

-compile({nowarn_unused_function,v_msg_FixedList/3}).
-dialyzer({nowarn_function,v_msg_FixedList/3}).
v_msg_FixedList(#'FixedList'{type = F1, entry = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_msg_FixedEntry(Elem, [entry | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'FixedEntry'}},
			 F2, [entry | Path])
    end,
    ok;
v_msg_FixedList(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'FixedList'}, X, Path).

-compile({nowarn_unused_function,v_msg_CompanyList/3}).
-dialyzer({nowarn_function,v_msg_CompanyList/3}).
v_msg_CompanyList(#'CompanyList'{type = F1, names = F2},
		  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [names | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [names | Path])
    end,
    ok;
v_msg_CompanyList(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CompanyList'}, X, Path).

-compile({nowarn_unused_function,v_msg_CompanyInfoRequest/3}).
-dialyzer({nowarn_function,v_msg_CompanyInfoRequest/3}).
v_msg_CompanyInfoRequest(#'CompanyInfoRequest'{type =
						   F1,
					       company = F2},
			 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [company | Path], TrUserData)
    end,
    ok;
v_msg_CompanyInfoRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CompanyInfoRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_CompanyInfoReply/3}).
-dialyzer({nowarn_function,v_msg_CompanyInfoReply/3}).
v_msg_CompanyInfoReply(#'CompanyInfoReply'{type = F1,
					   company = F2, entryA = F3,
					   entryF = F4},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [type | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [company | Path], TrUserData)
    end,
    if is_list(F3) ->
	   _ = [v_msg_AuctionEntry(Elem, [entryA | Path],
				   TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'AuctionEntry'}},
			 F3, [entryA | Path])
    end,
    if is_list(F4) ->
	   _ = [v_msg_FixedEntry(Elem, [entryF | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'FixedEntry'}},
			 F4, [entryF | Path])
    end,
    ok;
v_msg_CompanyInfoReply(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'CompanyInfoReply'}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, 'Reply'},
      [#field{name = result, fnum = 1, rnum = 2, type = bool,
	      occurrence = optional, opts = []},
       #field{name = message, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'LoginRequest'},
      [#field{name = username, fnum = 1, rnum = 2,
	      type = string, occurrence = optional, opts = []},
       #field{name = password, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = role, fnum = 3, rnum = 4, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'Request'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, 'LogoutRequest'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'AuctionBid'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = company, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = interest, fnum = 5, rnum = 6,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'FixedSubscription'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = company, fnum = 3, rnum = 4,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	      occurrence = optional, opts = []}]},
     {{msg, 'Auction'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = company, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = interest, fnum = 4, rnum = 5,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'FixedLoan'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = username, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = interest, fnum = 4, rnum = 5,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'AuctionEntry'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = company, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = interest, fnum = 4, rnum = 5,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'AuctionList'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = entry, fnum = 2, rnum = 3,
	      type = {msg, 'AuctionEntry'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'FixedEntry'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = company, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = interest, fnum = 4, rnum = 5,
	      type = double, occurrence = optional, opts = []}]},
     {{msg, 'FixedList'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = entry, fnum = 2, rnum = 3,
	      type = {msg, 'FixedEntry'}, occurrence = repeated,
	      opts = []}]},
     {{msg, 'CompanyList'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = names, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, 'CompanyInfoRequest'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = company, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, 'CompanyInfoReply'},
      [#field{name = type, fnum = 1, rnum = 2, type = string,
	      occurrence = optional, opts = []},
       #field{name = company, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = entryA, fnum = 3, rnum = 4,
	      type = {msg, 'AuctionEntry'}, occurrence = repeated,
	      opts = []},
       #field{name = entryF, fnum = 4, rnum = 5,
	      type = {msg, 'FixedEntry'}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    ['Reply', 'LoginRequest', 'Request', 'LogoutRequest',
     'AuctionBid', 'FixedSubscription', 'Auction',
     'FixedLoan', 'AuctionEntry', 'AuctionList',
     'FixedEntry', 'FixedList', 'CompanyList',
     'CompanyInfoRequest', 'CompanyInfoReply'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['Reply', 'LoginRequest', 'Request', 'LogoutRequest',
     'AuctionBid', 'FixedSubscription', 'Auction',
     'FixedLoan', 'AuctionEntry', 'AuctionList',
     'FixedEntry', 'FixedList', 'CompanyList',
     'CompanyInfoRequest', 'CompanyInfoReply'].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def('Reply') ->
    [#field{name = result, fnum = 1, rnum = 2, type = bool,
	    occurrence = optional, opts = []},
     #field{name = message, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('LoginRequest') ->
    [#field{name = username, fnum = 1, rnum = 2,
	    type = string, occurrence = optional, opts = []},
     #field{name = password, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = role, fnum = 3, rnum = 4, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('Request') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []}];
find_msg_def('LogoutRequest') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('AuctionBid') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = company, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = interest, fnum = 5, rnum = 6,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('FixedSubscription') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = company, fnum = 3, rnum = 4,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 4, rnum = 5, type = uint32,
	    occurrence = optional, opts = []}];
find_msg_def('Auction') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = company, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = interest, fnum = 4, rnum = 5,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('FixedLoan') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = username, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = interest, fnum = 4, rnum = 5,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('AuctionEntry') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = company, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = interest, fnum = 4, rnum = 5,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('AuctionList') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = entry, fnum = 2, rnum = 3,
	    type = {msg, 'AuctionEntry'}, occurrence = repeated,
	    opts = []}];
find_msg_def('FixedEntry') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = company, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = amount, fnum = 3, rnum = 4, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = interest, fnum = 4, rnum = 5,
	    type = double, occurrence = optional, opts = []}];
find_msg_def('FixedList') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = entry, fnum = 2, rnum = 3,
	    type = {msg, 'FixedEntry'}, occurrence = repeated,
	    opts = []}];
find_msg_def('CompanyList') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = names, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def('CompanyInfoRequest') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = company, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []}];
find_msg_def('CompanyInfoReply') ->
    [#field{name = type, fnum = 1, rnum = 2, type = string,
	    occurrence = optional, opts = []},
     #field{name = company, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = entryA, fnum = 3, rnum = 4,
	    type = {msg, 'AuctionEntry'}, occurrence = repeated,
	    opts = []},
     #field{name = entryF, fnum = 4, rnum = 5,
	    type = {msg, 'FixedEntry'}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
